Excercise no 8
Create a function that creates and returns a copy of an object. 
The function should take two arguments: the object to copy and 
an array of the keys that you want to copy. 
Do not mutate the original object.

The function should let you omit the array of keys argument when calling 
the function. If you do omit the argument, the function should copy 
all of the existing keys from the object.

Here are some examples for your reference:

let objToCopy = {
  foo: 1,
  bar: 2,
  qux: 3,
};

let newObj = copyObj(objToCopy);
console.log(newObj);        // => { foo: 1, bar: 2, qux: 3 }

let newObj2 = copyObj(objToCopy, [ 'foo', 'qux' ]);
console.log(newObj2);       // => { foo: 1, qux: 3 }

let newObj3 = copyObj(objToCopy, [ 'bar' ]);
console.log(newObj3);       // => { bar: 2 }

response:
let objToCopy = {
  foo: 1,
  bar: 2,
  qux: 3,
};

function copyObj(copyThis, defaultKeys = Object.keys(copyThis)) {
  let newObj = {};
  for (let keyValue in copyThis) {
    for (let i = 0; i < defaultKeys.length; i += 1) {
      newObj[defaultKeys[i]] = copyThis[keyValue] }
    }
  return newObj;
}



let newObj = copyObj(objToCopy);
console.log(newObj);        // => { foo: 1, bar: 2, qux: 3 }

let newObj2 = copyObj(objToCopy, [ 'foo', 'qux' ]);
console.log(newObj2);       // => { foo: 1, qux: 3 }

let newObj3 = copyObj(objToCopy, [ 'bar' ]);
console.log(newObj3);       // => { bar: 2 }


Well this was frustrating... I couldn't get this code to work. Everything seemed
like it was in the right place. I was iterating over the object to copy and then
iterating through the array to grab the keys. The solution presented shows where 
I was off. I was iterating through... BUT for every key value in the object to be 
copied I was running the inside loop to completion. Then when the inside loop finished
it would run all over again with the next key value in the object to be copied. So 
that in the end I was left with copied keys, BUT only for the last key value in the
object to be copied.